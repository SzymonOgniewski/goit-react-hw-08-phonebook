{"version":3,"file":"static/js/703.0c12cca4.chunk.js","mappings":"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","sources":["pages/ContactBook/AddContactForm/Input/Input.js","redux/selectors.js","pages/ContactBook/AddContactForm/AddContactForm.js","pages/ContactBook/ContactList/Contact/Contact.js","pages/ContactBook/ContactList/Filter/Filter.js","pages/ContactBook/ContactList/ContactList.js","pages/ContactBook/ContactBook.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({\n  placeholder,\n  type,\n  pattern,\n  title,\n  inputName,\n  label,\n  htmlFor,\n}) => {\n  return (\n    <>\n      <label htmlFor={htmlFor}>{label}</label>\n      <input\n        autoComplete=\"off\"\n        placeholder={placeholder}\n        type={type}\n        name={inputName}\n        pattern={pattern}\n        title={title}\n        required\n      />\n    </>\n  );\n};\nInput.propTypes = {\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  pattern: PropTypes.string,\n  title: PropTypes.string,\n  label: PropTypes.string,\n  htmlFor: PropTypes.string,\n};\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectPendingState = state => state.contacts.isPending;\nexport const selectError = state => state.contacts.errorMessage;\n","import React from 'react';\nimport { Input } from './Input/Input';\nimport { useDispatch } from 'react-redux';\nimport { addContactThunk } from 'redux/contacts/contactsThunks';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\n\nexport const AddContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`There is already contact with name of ${name} on your list`);\n      return;\n    }\n    dispatch(\n      addContactThunk({\n        name: name,\n        number: number,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={handleSubmit}>\n        <Input\n          placeholder=\"Enter Name\"\n          type=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          inputName=\"name\"\n          label=\"Name\"\n          htmlFor=\"name\"\n        />\n        <Input\n          placeholder=\"Enter phone number\"\n          type=\"tel\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          inputName=\"number\"\n          label=\"Phone number\"\n          htmlFor=\"phone number\"\n        />\n        <button type=\"submit\">ADD CONTACT</button>\n      </form>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contactsThunks';\nimport PropTypes from 'prop-types';\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = () => {\n    dispatch(deleteContactThunk(contact.id));\n  };\n  return (\n    <>\n      <span>\n        {contact.name}: {contact.number}\n      </span>\n      <button type=\"button\" onClick={handleDeleteContact}>\n        Delete\n      </button>\n    </>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    createdAt: PropTypes.string,\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilterAction } from 'redux/filter/filterSlice';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(changeFilterAction(e.target.value));\n  };\n  return (\n    <>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n\n      <input\n        onChange={changeFilter}\n        autoComplete=\"off\"\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"search\"\n      />\n    </>\n  );\n};\n","import {\n  selectContacts,\n  selectFilter,\n  selectPendingState,\n} from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { Contact } from './Contact/Contact';\nimport { Filter } from './Filter/Filter';\nimport { Spinner, Box } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isPending = useSelector(selectPendingState);\n  const filteredList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  const list = filteredList.map(contact => (\n    <li key={contact.id}>\n      <Contact contact={contact} />\n    </li>\n  ));\n\n  return (\n    <div>\n      <Filter />\n      {isPending ? (\n        <Box textAlign={'center'}>\n          <Spinner\n            color=\"red.500\"\n            size=\"xl\"\n            speed=\"0.35s\"\n            thickness=\"6px\"\n            emptyColor=\"gray.200\"\n            align=\"center\"\n          />\n        </Box>\n      ) : (\n        <div>\n          {list.length === 0 ? (\n            <p>Brak kontaktów do wyświetlenia.</p>\n          ) : (\n            <ul>{list}</ul>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllContactsThunk } from 'redux/contacts/contactsThunks';\nimport { AddContactForm } from './AddContactForm/AddContactForm';\nimport { ContactList } from './ContactList/ContactList';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllContactsThunk());\n  }, [dispatch]);\n  return (\n    <main>\n      <div>\n        <div>\n          <h2>Contacts</h2>\n          <AddContactForm />\n          <ContactList />\n        </div>\n      </div>\n    </main>\n  );\n};\nexport default Phonebook;\n"],"names":["Input","placeholder","type","pattern","title","inputName","label","htmlFor","autoComplete","name","required","selectContacts","state","contacts","selectFilter","filter","selectPendingState","isPending","AddContactForm","useSelector","dispatch","useDispatch","onSubmit","e","preventDefault","form","target","elements","value","number","some","contact","alert","addContactThunk","reset","Contact","onClick","deleteContactThunk","id","Filter","onChange","changeFilterAction","ContactList","list","toLowerCase","includes","map","textAlign","color","size","speed","thickness","emptyColor","align","length","useEffect","getAllContactsThunk"],"sourceRoot":""}